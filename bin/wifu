#!/usr/bin/python3
import logging
import argparse
import time
import signal
import sys
import toml
import os
import subprocess

import wifu
from wifu import utils
from wifu.plugins import cmd as plugins_cmd
from wifu import log
from wifu import restart
from wifu import fs
from wifu.utils import DottedTomlEncoder


def do_clear(display):
    logging.info("clearing the display ...")
    display.clear()
    sys.exit(0)


def do_manual_mode(agent):
    logging.info("entering manual mode ...")

    agent.mode = 'manual'
    agent.last_session.parse(agent.view(), args.skip_session)
    if not args.skip_session:
        logging.info(
            "the last session lasted %s (%d completed epochs, trained for %d), average reward:%s (min:%s max:%s)" % (
                agent.last_session.duration_human,
                agent.last_session.epochs,
                agent.last_session.train_epochs,
                agent.last_session.avg_reward,
                agent.last_session.min_reward,
                agent.last_session.max_reward))

    while True:
        display.on_manual_mode(agent.last_session)
        time.sleep(5)
        if grid.is_connected():
            plugins.on('internet_available', agent)


def do_attack_mode():
    """Runs the WiFU attack tools menu interface"""
    logging.info("entering attack mode ...")
    
    attacks_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "wifu_attacks", "scripts")
    if not os.path.exists(attacks_dir):
        logging.error("Attack scripts directory not found at %s", attacks_dir)
        sys.exit(1)
    
    # Get available attack scripts
    attack_scripts = []
    for file in os.listdir(attacks_dir):
        if file.endswith(".py"):
            name = file.replace(".py", "").replace("_", " ").title()
            attack_scripts.append((name, os.path.join(attacks_dir, file)))
    
    while True:
        # Clear screen
        os.system('cls' if os.name == 'nt' else 'clear')
        print("\n========== WiFU Attack Mode ==========\n")
        print("Available attacks:\n")
        
        for i, (name, _) in enumerate(attack_scripts, 1):
            print(f"{i}. {name}")
        
        print("\n0. Exit to normal mode")
        
        choice = input("\nSelect an attack [0-{}]: ".format(len(attack_scripts)))
        
        try:
            choice = int(choice)
            if choice == 0:
                return
            
            if 1 <= choice <= len(attack_scripts):
                attack_name, attack_path = attack_scripts[choice - 1]
                
                # Get interface
                interface = input("\nEnter wireless interface name [wlan0]: ")
                if not interface:
                    interface = "wlan0"
                
                # Run the selected attack
                print(f"\nRunning {attack_name}...\n")
                cmd = ["python3", attack_path, "-i", interface]
                
                try:
                    subprocess.run(cmd)
                except KeyboardInterrupt:
                    print("\nAttack stopped.")
                
                input("\nPress Enter to continue...")
            else:
                print("\nInvalid choice!")
                time.sleep(1)
        except ValueError:
            print("\nPlease enter a number!")
            time.sleep(1)

def do_auto_mode(agent):
    logging.info("entering auto mode ...")

    agent.mode = 'auto'
    agent.start()

    while True:
        try:
            # recon on all channels
            agent.recon()
            # get nearby access points grouped by channel
            channels = agent.get_access_points_by_channel()
            # for each channel
            for ch, aps in channels:
                agent.set_channel(ch)

                if not agent.is_stale() and agent.any_activity():
                    logging.info("%d access points on channel %d" % (len(aps), ch))

                # for each ap on this channel
                for ap in aps:
                    # send an association frame in order to get for a PMKID
                    agent.associate(ap)
                    # deauth all client stations in order to get a full handshake
                    for sta in ap['clients']:
                        agent.deauth(ap, sta)

            # An interesting effect of this:
            #
            # From WiFU's perspective, the more new access points
            # and / or client stations nearby, the longer one epoch of
            # its relative time will take ... basically, in WiFU's universe,
            # WiFi electromagnetic fields affect time like gravitational fields
            # affect ours ... neat ^_^
            agent.next_epoch()

            if grid.is_connected():
                plugins.on('internet_available', agent)

        except Exception as e:
            if str(e).find("wifi.interface not set") > 0:
                logging.exception("main loop exception due to unavailable wifi device, likely programmatically disabled (%s)", e)
                logging.info("sleeping 60 seconds then advancing to next epoch to allow for cleanup code to trigger")
                time.sleep(60)
                agent.next_epoch()
            else:
                logging.exception("main loop exception (%s)", e)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser = plugins_cmd.add_parsers(parser)

    parser.add_argument('-C', '--config', action='store', dest='config', default='/etc/wifu/default.toml',
                        help='Main configuration file.')
    parser.add_argument('-U', '--user-config', action='store', dest='user_config', default='/etc/wifu/config.toml',
                        help='If this file exists, configuration will be merged and this will override default values.')

    parser.add_argument('--manual', dest="do_manual", action="store_true", default=False, help="Manual mode.")
    parser.add_argument('--skip-session', dest="skip_session", action="store_true", default=False,
                        help="Skip last session parsing in manual mode.")

    parser.add_argument('--clear', dest="do_clear", action="store_true", default=False,
                        help="Clear the ePaper display and exit.")
                        
    parser.add_argument('--attack-mode', dest="do_attack", action="store_true", default=False,
                        help="Enter WiFU attack mode to run WPA2/WPA3 attack tools.")

    parser.add_argument('--debug', dest="debug", action="store_true", default=False,
                        help="Enable debug logs.")

    parser.add_argument('--version', dest="version", action="store_true", default=False,
                        help="Print the version.")

    parser.add_argument('--print-config', dest="print_config", action="store_true", default=False,
                        help="Print the configuration.")

    args = parser.parse_args()


    if plugins_cmd.used_plugin_cmd(args):
      config = utils.load_config(args)
      log.setup_logging(args, config)
      rc = plugins_cmd.handle_cmd(args, config)
      sys.exit(rc)

    if args.version:
        print(wifu.__version__)
        sys.exit(0)

    config = utils.load_config(args)

    if args.print_config:
        try:
            print(toml.dumps(config, encoder=DottedTomlEncoder()))
        except TypeError:
            # For compatibility with different toml versions
            print(str(config))
        sys.exit(0)

    from wifu.identity import KeyPair
    from wifu.agent import Agent
    from wifu.ui import fonts
    from wifu.ui.display import Display
    from wifu import grid
    from wifu import plugins

    wifu.config = config
    fs.setup_mounts(config)
    log.setup_logging(args, config)
    fonts.init(config)

    try:
        if 'main' in config and 'name' in config['main']:
            wifu.set_name(config['main']['name'])
    except Exception as e:
        logging.warning(f"Could not set name: {e}")

    plugins.load(config)

    display = Display(config=config, state={'name': '%s>' % wifu.name()})

    if args.do_clear:
        do_clear(display)
        sys.exit(0)

    agent = Agent(view=display, config=config, keypair=KeyPair(view=display))

    def usr1_handler(*unused):
        logging.info('Received USR1 singal. Restart process ...')
        restart("MANU" if args.do_manual else "AUTO")

    # Handle signal differently based on OS
    if hasattr(signal, 'SIGUSR1'):  # Unix/Linux
        signal.signal(signal.SIGUSR1, usr1_handler)
    
    if args.do_attack:
        do_attack_mode()
    elif args.do_manual:
        do_manual_mode(agent)
    else:
        do_auto_mode(agent)
